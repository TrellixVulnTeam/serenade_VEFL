const chokidar=require("chokidar"),driver=require("serenade-driver"),glob=require("glob"),os=require("os"),path=require("path"),WebSocket=require("ws");let commands={},hints={},words={},onContextChangedCallback=()=>{},lastReload=0;const scripts=path.join(os.homedir(),".serenade","scripts");let websocket,resolvers={};const createBuilder=(n,d,l,i)=>{"string"==typeof n&&(n=[n]);for(let e=0;e<n.length;e++)"intellij"===n[e]&&(n[e]="jetbrains");return"string"==typeof d&&(d=[d]),"string"==typeof l&&(l=[l]),"string"==typeof i&&(i=[i]),{command:(e,a,r,s)=>{var o=Math.random().toString();return commands[o]={id:o,applications:n,languages:d,extensions:l,urls:i,templated:e,autoExecute:r&&r.autoExecute,chainable:r&&r.chainable,callback:a,disabled:!!s},o},disable:e=>{for(const a of e="string"==typeof e?[e]:e)commands[a]&&(commands[a].disabled=!0),words[a]&&(words[a].disabled=!0),hints[a]&&(hints[a].disabled=!0);sendCommands()},enable:e=>{for(const a of e="string"==typeof e?[e]:e)commands[a]&&(commands[a].disabled=!1),words[a]&&(words[a].disabled=!1),hints[a]&&(hints[a].disabled=!1);sendCommands()},hint:(e,a)=>{var r=Math.random().toString();hints[r]={id:r,applications:n,languages:d,extensions:l,urls:i,hint:e,disabled:!!a}},key:(e,a,r,s,o)=>{var t=Math.random().toString();return commands[t]={id:t,applications:n,languages:d,extensions:l,urls:i,templated:e,autoExecute:s&&s.autoExecute,chainable:s&&s.chainable,callback:e=>{e.pressKey(a,r)},disabled:!!o},t},pronounce:(e,a,r)=>{var s=Math.random().toString();return words[s]={id:s,applications:n,languages:d,extensions:l,urls:i,before:e,after:a,disabled:!!r},s},snippet:(e,a,r,s,o)=>{var t=Math.random().toString();return r&&3==arguments.length&&(r=r.formatting?r.formatting:r).snippetType&&(s=r.snippetType),commands[t]={id:t,applications:n,languages:d,extensions:l,urls:i,templated:e,generated:a,options:r,snippetType:s,disabled:!!o},t},text:(e,a,r,s)=>{var o=Math.random().toString();return commands[o]={id:o,applications:n,languages:d,extensions:l,urls:i,templated:e,autoExecute:r&&r.autoExecute,chainable:r&&r.chainable,callback:e=>{e.typeText(a)},disabled:!!s},o}}},domBlur=e=>{send("domBlur",{query:e})},domClick=e=>{send("domClick",{query:e})},domCopy=e=>{send("domCopy",{query:e})},domFocus=e=>{send("domFocus",{query:e})},domScroll=e=>{send("domScroll",{query:e})},evaluateInPlugin=e=>{send("evaluateInPlugin",{command:e})},reload=()=>{lastReload=Date.now(),commands={},glob(scripts+"/**/*.js",{follow:!0,ignore:["**/node_modules/**","**/.git/**"]},(e,a)=>{let r=!1;e&&(r=!0,console.error(e),send("error",{error:e.stack}));for(const s of a)try{delete require.cache[require.resolve(s)],require(s)}catch(e){r=!0,console.error(e),send("error",{error:e.stack});break}r||(send("error",{error:""}),sendCommands())})},runCommand=async a=>(send("sendText",{text:a}),new Promise(e=>{resolvers[a]=e})),send=(e,a)=>{websocket&&1==websocket.readyState&&websocket.send(JSON.stringify({message:e,data:a}))},sendCommands=()=>{send("customCommands",{commands:Object.values(commands).filter(e=>!e.disabled),hints:Object.values(hints).filter(e=>!e.disabled),words:Object.values(words).filter(e=>!e.disabled)})},serenade={app:e=>createBuilder(e,[],[],[]),global:()=>createBuilder([],[],[],[]),language:e=>createBuilder([],e,[],[]),extension:e=>createBuilder([],[],e,[]),scope:(e,a)=>createBuilder(e,a,[],[]),url:(e,a)=>(a=a||["chrome","edge"],createBuilder(a,[],[],e)),onContextChanged:e=>{onContextChangedCallback=e}},main=()=>{global.serenade=serenade,driver.focus=driver.focusApplication,driver.domBlur=domBlur,driver.domClick=domClick,driver.domCopy=domCopy,driver.domFocus=domFocus,driver.domScroll=domScroll,driver.evaluateInPlugin=evaluateInPlugin,driver.runCommand=runCommand,(websocket=new WebSocket("ws://localhost:17373")).on("message",async e=>{e=JSON.parse("string"==typeof e?e:e.toString());"execute"==e.message?(Object.keys(commands).includes(e.data.id)&&await commands[e.data.id].callback(driver,e.data.matches),resolvers={}):"reload"==e.message?reload():"keepalive"==e.message?send("keepalive",{}):"callback"==e.message?Object.keys(resolvers).includes(e.data.transcript)&&resolvers[e.data.transcript]():"contextChanged"==e.message&&onContextChangedCallback&&onContextChangedCallback(e.data)}),websocket.on("open",()=>{reload()}),chokidar.watch(scripts).on("all",(e,a)=>{lastReload>Date.now()-1e3||reload()})};try{main()}catch(e){console.log(e)}