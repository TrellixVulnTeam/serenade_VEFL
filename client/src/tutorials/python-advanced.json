{"steps":[{"title":"Getting Started","body":"<p>This guide will walk you through some more advanced Serenade features, using Python.</p><p>To start, click Next below.</p>","skipEditorFocus":true},{"title":"Setup","body":"<p>Serenade will send voice commands to whichever application you have in the foreground. You can see which application Serenade is controlling via the icon at the bottom-right.</p><p>To get started, open VS Code, Atom, or JetBrains, then click next.</p>","nextWhenEditorFocused":true},{"title":"Setup","body":"<p>Before we start the tutorial, let's make sure we're using an empty file. In your editor (without using voice), create a new file and save it as <code>serenade.py</code>.</p>","nextWhenEditorFilename":true},{"title":"Using an API","body":"<p>First, we're going to write a short program that makes an API call to download a dog photo to your machine. (Important stuff.) Your editor should now show you what the final product will look like.</p><p>When you're ready to start, click or say:</p>","source":"import requests\n\nurl = 'https://random.dog/woof.json'\nresponse = requests.get(url)\ndata = response.json()\npath = data['url']\nwith open(path.split('/')[-1], 'wb') as file:\n    file.write(requests.get(path).content)","cursor":0,"transcript":"next","resetSource":"import requests\n\nurl = 'https://random.dog/woof.json'\nresponse = requests.get(url)\ndata = response.json()\npath = data['url']\nwith open(path.split('/')[-1], 'wb') as file:\n    file.write(requests.get(path).content)","resetCursor":0,"textOnly":true},{"title":"Adding code","body":"<p>We started off the program for you, and now we'll write the rest with voice! First, let's make a request to the API. Say:</p>","source":"import requests\n\nurl = 'https://random.dog/woof.json'","cursor":53,"transcript":"add response equals requests dot get of url","resetSource":"import requests\n\nurl = 'https://random.dog/woof.json'","resetCursor":53,"matches":["add <code>response = requests.get(url)</code>"]},{"title":"Adding code","body":"<p>Next, we can parse the API response as JSON. Say:</p>","source":"import requests\n\nurl = 'https://random.dog/woof.json'\nresponse = requests.get(url)","cursor":82,"transcript":"add data equals response dot json parens","matches":["add <code>data = response.json()</code>"]},{"title":"Adding code","body":"<p>Now, we can use a field returned by the API. Say:</p>","source":"import requests\n\nurl = 'https://random.dog/woof.json'\nresponse = requests.get(url)\ndata = response.json()","cursor":105,"transcript":"add path equals data brackets string url","matches":["add <code>path = data['url']</code>"]},{"title":"Adding code","body":"<p>Next, let's open up a new file where we'll save the image. Say:</p>","source":"import requests\n\nurl = 'https://random.dog/woof.json'\nresponse = requests.get(url)\ndata = response.json()\npath = data['url']","cursor":124,"transcript":"add with open of path comma string wb as file","matches":["add <code>with open(path, 'wb') as file:\n    pass</code>"]},{"title":"Changing an argument","body":"<p>Actually, let's change that first argument to only include the last part of the URL, instead of the whole thing. First, move your cursor there by saying:</p>","source":"import requests\n\nurl = 'https://random.dog/woof.json'\nresponse = requests.get(url)\ndata = response.json()\npath = data['url']\nwith open(path, 'wb') as file:\n    pass","cursor":154,"transcript":"end of first argument"},{"title":"Changing an argument","body":"<p>Now, let's extract the end of the URL by calling the split function, then using the last element of that list. Say:</p>","source":"import requests\n\nurl = 'https://random.dog/woof.json'\nresponse = requests.get(url)\ndata = response.json()\npath = data['url']\nwith open(path, 'wb') as file:\n    pass","cursor":139,"transcript":"insert dot split of string slash brackets negative one","matches":["insert <code>.split('/')[-1]</code>"]},{"title":"Adding code","body":"<p>Finally, we can actually download and save the file from the API. Say:</p>","source":"import requests\n\nurl = 'https://random.dog/woof.json'\nresponse = requests.get(url)\ndata = response.json()\npath = data['url']\nwith open(path.split('/')[-1], 'wb') as file:\n    pass","cursor":154,"transcript":"add file dot write of requests dot get of path","matches":["add <code>file.write(requests.get(path))</code>"]},{"title":"Inserting code","body":"<p>Oops! We forgot something in the argument to the write function. To append some text to the argument, say:</p>","source":"import requests\n\nurl = 'https://random.dog/woof.json'\nresponse = requests.get(url)\ndata = response.json()\npath = data['url']\nwith open(path.split('/')[-1], 'wb') as file:\n    file.write(requests.get(path))","cursor":205,"transcript":"end of argument insert dot content","matches":["end of argument, insert <code>.content</code>"]},{"title":"Python + Flask","body":"<p>Awesome! That completes our first example. Next, we're going to write a simple Flask web app with voiceâ€”but this time, we won't give you all the answers!</p><p>To get started, say:</p>","source":"import requests\n\nurl = 'https://random.dog/woof.json'\nresponse = requests.get(url)\ndata = response.json()\npath = data['url']\nwith open(path.split('/')[-1], 'wb') as file:\n    file.write(requests.get(path).content)","cursor":212,"transcript":"next","textOnly":true},{"title":"Python + Flask","body":"<p>Your editor should now have a Flask app as a starting point. We're going to add a few new functions to handle login and logout.</p><p>When you're ready, say:</p>","source":"from flask import Flask, session, redirect, url_for\n\napp = Flask(__name__)\napp.secret_key = 'secret'\n\n\n@app.route(\"/index\")\ndef index():\n    return \"Welcome to my page\"\n\n\n@app.route(\"/hello/<name>\")\ndef hello(name):\n    return \"hello \" + name\n\n","cursor":245,"transcript":"next","resetSource":"from flask import Flask, session, redirect, url_for\n\napp = Flask(__name__)\napp.secret_key = 'secret'\n\n\n@app.route(\"/index\")\ndef index():\n    return \"Welcome to my page\"\n\n\n@app.route(\"/hello/<name>\")\ndef hello(name):\n    return \"hello \" + name\n\n","resetCursor":245,"textOnly":true},{"title":"Adding a function","body":"<p>First, create a new function called <code>login</code>.</p>","transcript":"add function login","matches":["add function <code>def login():\n    pass</code>"],"hideAnswer":true},{"title":"Adding a condition","body":"<p>Inside of that function, add a new if statement:</p><p><code>if request.method == 'POST'</code></p>","source":"from flask import Flask, session, redirect, url_for\n\napp = Flask(__name__)\napp.secret_key = 'secret'\n\n\n@app.route(\"/index\")\ndef index():\n    return \"Welcome to my page\"\n\n\n@app.route(\"/hello/<name>\")\ndef hello(name):\n    return \"hello \" + name\n\n\ndef login():\n    pass\n","cursor":254,"transcript":"add if request dot method equals string post","matches":["add <code>if request.method == \"post\":\n    pass</code>"],"hideAnswer":true},{"title":"Adding an assignment","body":"<p>Next, we're going to add a new entry to the global <code>session</code> dictionary. First, say:</p>","source":"from flask import Flask, session, redirect, url_for\n\napp = Flask(__name__)\napp.secret_key = 'secret'\n\n\n@app.route(\"/index\")\ndef index():\n    return \"Welcome to my page\"\n\n\n@app.route(\"/hello/<name>\")\ndef hello(name):\n    return \"hello \" + name\n\n\ndef login():\n    if request.method == \"post\":\n        pass\n","cursor":289,"transcript":"add session brackets string username","matches":["add <code>session[\"username\"]</code>"]},{"title":"Inserting a value","body":"<p>Now, finish the right-hand side of the assignment. On this line, insert:</p><p><code>= request.form[\"username\"]</code></p>","source":"from flask import Flask, session, redirect, url_for\n\napp = Flask(__name__)\napp.secret_key = 'secret'\n\n\n@app.route(\"/index\")\ndef index():\n    return \"Welcome to my page\"\n\n\n@app.route(\"/hello/<name>\")\ndef hello(name):\n    return \"hello \" + name\n\n\ndef login():\n    if request.method == \"post\":\n        session[\"username\"]\n","cursor":318,"transcript":"insert equals request dot form brackets string username","matches":["insert <code> = request.form[\"username\"]</code>"],"hideAnswer":true},{"title":"Adding a return","body":"<p>To finish this function, add a return statement:</p><p><code>return redirect(url_for(\"index\"))</code></p>","source":"from flask import Flask, session, redirect, url_for\n\napp = Flask(__name__)\napp.secret_key = 'secret'\n\n\n@app.route(\"/index\")\ndef index():\n    return \"Welcome to my page\"\n\n\n@app.route(\"/hello/<name>\")\ndef hello(name):\n    return \"hello \" + name\n\n\ndef login():\n    if request.method == \"post\":\n        session[\"username\"] = request.form[\"username\"]\n","cursor":345,"transcript":"add return redirect of url for of string index","matches":["add <code>return redirect(url_for(\"index\"))</code>"],"hideAnswer":true},{"title":"Adding a decorator","body":"<p>In order to register this function as a Flask route, we need to add a special Flask decorator. To do so, say:","source":"from flask import Flask, session, redirect, url_for\n\napp = Flask(__name__)\napp.secret_key = 'secret'\n\n\n@app.route(\"/index\")\ndef index():\n    return \"Welcome to my page\"\n\n\n@app.route(\"/hello/<name>\")\ndef hello(name):\n    return \"hello \" + name\n\n\ndef login():\n    if request.method == \"post\":\n        session[\"username\"] = request.form[\"username\"]\n        return redirect(url_for(\"index\"))\n","cursor":387,"transcript":"add decorator app dot route of string slash login","matches":["add decorator <code>@app.route(\"/login\")</code>"]},{"title":"Adding a function","body":"<p>That's it for our login function! All that's left is to add a logout function. So, add a function called <code>logout</code>.</p>","source":"from flask import Flask, session, redirect, url_for\n\napp = Flask(__name__)\napp.secret_key = 'secret'\n\n\n@app.route(\"/index\")\ndef index():\n    return \"Welcome to my page\"\n\n\n@app.route(\"/hello/<name>\")\ndef hello(name):\n    return \"hello \" + name\n\n@app.route(\"/login\")\ndef login():\n    if request.method == \"post\":\n        session[\"username\"] = request.form[\"username\"]\n        return redirect(url_for(\"index\"))\n","cursor":264,"transcript":"add function logout","matches":["add function <code>def logout():\n    pass</code>"],"hideAnswer":true},{"title":"Adding a statement","body":"<p>Now, we're ready to write our logout function. First, let's add a line that removes the <code>username</code> key we added to the <code>session</code> global earlier. Say:","source":"from flask import Flask, session, redirect, url_for\n\napp = Flask(__name__)\napp.secret_key = 'secret'\n\n\n@app.route(\"/index\")\ndef index():\n    return \"Welcome to my page\"\n\n\n@app.route(\"/hello/<name>\")\ndef hello(name):\n    return \"hello \" + name\n\n@app.route(\"/login\")\ndef login():\n    if request.method == \"post\":\n        session[\"username\"] = request.form[\"username\"]\n        return redirect(url_for(\"index\"))\n\n\ndef logout():\n    pass\n","cursor":420,"transcript":"add session dot pop of string username comma none","matches":["add <code>session.pop(\"username\", None)</code>"]},{"title":"Adding a return","body":"<p>To finish this function, add a return statement, just like before:</p><p><code>return redirect(url_for(\"index\"))</code></p>","source":"from flask import Flask, session, redirect, url_for\n\napp = Flask(__name__)\napp.secret_key = 'secret'\n\n\n@app.route(\"/index\")\ndef index():\n    return \"Welcome to my page\"\n\n\n@app.route(\"/hello/<name>\")\ndef hello(name):\n    return \"hello \" + name\n\n@app.route(\"/login\")\ndef login():\n    if request.method == \"post\":\n        session[\"username\"] = request.form[\"username\"]\n        return redirect(url_for(\"index\"))\n\n\ndef logout():\n    session.pop(\"username\", None)\n","cursor":457,"transcript":"add return redirect of url for of string index","matches":["add <code>return redirect(url_for(\"index\"))</code>"],"hideAnswer":true},{"title":"Adding a decorator","body":"<p>Just like before, we need to add a decorator to this function. Add one that looks like this:</p><p><code>@app.route(\"/logout\")</code></p>","source":"from flask import Flask, session, redirect, url_for\n\napp = Flask(__name__)\napp.secret_key = 'secret'\n\n\n@app.route(\"/index\")\ndef index():\n    return \"Welcome to my page\"\n\n\n@app.route(\"/hello/<name>\")\ndef hello(name):\n    return \"hello \" + name\n\n@app.route(\"/login\")\ndef login():\n    if request.method == \"post\":\n        session[\"username\"] = request.form[\"username\"]\n        return redirect(url_for(\"index\"))\n\n\ndef logout():\n    session.pop(\"username\", None)\n    return redirect(url_for(\"index\"))\n","cursor":495,"transcript":"add decorator app dot route of string slash logout","matches":["add decorator <code>@app.route(\"/logout\")</code>"],"hideAnswer":true},{"title":"Try it out!","body":"<p>That's it for our tutorial!</p><p>Don't hesitate to reach out in the community if you run into any issues.</p>","source":"from flask import Flask, session, redirect, url_for\n\napp = Flask(__name__)\napp.secret_key = 'secret'\n\n\n@app.route(\"/index\")\ndef index():\n    return \"Welcome to my page\"\n\n\n@app.route(\"/hello/<name>\")\ndef hello(name):\n    return \"hello \" + name\n\n@app.route(\"/login\")\ndef login():\n    if request.method == \"post\":\n        session[\"username\"] = request.form[\"username\"]\n        return redirect(url_for(\"index\"))\n\n@app.route(\"/logout\")\ndef logout():\n    session.pop(\"username\", None)\n    return redirect(url_for(\"index\"))\n","cursor":430,"skipEditorFocus":true,"last":true}],"filename":"python-advanced.py"}