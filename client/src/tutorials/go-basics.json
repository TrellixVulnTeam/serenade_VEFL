{"steps":[{"title":"Getting Started","body":"<p>This guide will walk you through writing your first few lines of code with voice. We’ll go through a few different examples that cover adding, navigating, and editing code.</p><p>To start, click Next below.</p>","skipEditorFocus":true},{"title":"Setup","body":"<p>Serenade will send voice commands to whichever application you have in the foreground. You can see which application Serenade is controlling via the icon at the bottom-right.</p><p>To get started, open VS Code, Atom, or JetBrains, then click next.</p>","nextWhenEditorFocused":true},{"title":"Setup","body":"<p>Before we start the tutorial, let's make sure we're using an empty file. In your editor (without using voice), create a new file and save it as <code>serenade.go</code>.</p>","nextWhenEditorFilename":true},{"title":"Alternatives","body":"<p>As you speak, you’ll see a numbered list of possible commands appear below. The first command runs automatically when you’ve finished speaking. To select a different command, just say its number, like “two” or “three”, and Serenade will run that command instead.</p><p>Let's get started! First, toggle the listening switch above to enable Serenade. Then, say:</p>","transcript":"next","textOnly":true},{"title":"Understanding commands","body":"<p>Most Serenade commands consist of an <i>action</i> followed by a <i>selector</i>.</p><p>An action describes what you're trying to do, like “go to”, “add”, or “insert”. A selector describes the object you're trying to change, like a “line”, “word”, “function”, or “class”.</p><p>We'll see examples throughout this tutorial! To continue, say:</p>","transcript":"next","textOnly":true},{"title":"Inserting code","body":"<p>We'll start with one of the most common actions, “insert”. The “insert” action will insert text directly at your cursor. Try it out by saying:","source":"","cursor":0,"transcript":"insert message equals string hello world","resetSource":"","matches":["insert <code>message = \"hello world\"</code>"]},{"title":"Undo","body":"<p>You should now see some code in your editor! To undo any command, you can simply say “undo”. Try it out:</p>","source":"message = \"hello world\"","cursor":23,"transcript":"undo"},{"title":"Writing code","body":"<p>In this first example, we’re going to write a factorial function from scratch.</p><p>To continue, say:</p>","source":"","cursor":0,"transcript":"next","resetSource":"","textOnly":true},{"title":"Writing a factorial method","body":"<p>Take a look at your editor—that's the code we'll be writing with voice.</p><p>When you're ready to start, say:</p>","source":"func factorial(number int) int {\n  if number == 0 {\n    return 1\n  }\n  else {\n    return number * factorial(number - 1)\n  }\n}\n","cursor":0,"transcript":"next","resetSource":"func factorial(number int) int {\n  if number == 0 {\n    return 1\n  }\n  else {\n    return number * factorial(number - 1)\n  }\n}\n","textOnly":true},{"title":"Adding a function","body":"<p>While “insert” inserts text at your cursor, the “add” action is used to create new statements and constructs like functions or classes, without needing to dictate any boilerplate.</p><p>Let's give it a try! Create a new function called <code>factorial</code> by saying:</p>","source":"","cursor":0,"transcript":"add function int factorial","resetSource":"","matches":["add function <code>func factorial() int {\n}</code>"]},{"title":"Adding a parameter","body":"<p>That function will need a parameter, so add one with:</p>","source":"func factorial() int {\n}\n","cursor":14,"transcript":"add parameter int number","matches":["add parameter <code>number int</code>"]},{"title":"Adding a condition","body":"<p>Next, let's add a condition to check if the <code>number</code> parameter we just added equals zero. Say:</p>","source":"func factorial(number int) int {\n}\n","cursor":21,"transcript":"add if number equals zero","matches":["add <code>if number == 0 {\n}</code>"]},{"title":"Adding a statement","body":"<p>Now, add a return statement by saying:</p>","source":"func factorial(number int) int {\n  if number == 0 {\n  }\n}\n","cursor":49,"transcript":"add return 1","matches":["add <code>return 1</code>"]},{"title":"Adding a branch","body":"<p>Great! Now our if branch is done. Let's create an else branch by saying:</p>","source":"func factorial(number int) int {\n  if number == 0 {\n    return 1\n  }\n}\n","cursor":64,"transcript":"add else","matches":["add <code>else {\n}</code>"]},{"title":"Finishing the function","body":"<p>So far, we've been using short commands, but you can also dictate longer commands with Serenade.</p><p>Let's try finishing up the factorial function with a single voice command. Say:</p>","source":"func factorial(number int) int {\n  if number == 0 {\n    return 1\n  } else {\n  }\n}\n","cursor":75,"transcript":"add return number times factorial of number minus one","matches":["add <code>return number * factorial[number-1]</code>"]},{"title":"Editing code","body":"<p>Congrats, you just wrote your first code with voice!</p><p>Now that we've covered some commands for adding new code, let's try editing some existing code.</p><p>To continue, say:</p>","source":"func factorial(number int) int {\n  if number == 0 {\n    return 1\n  } else {\n    return number * factorial[number-1]\n  }\n}\n","cursor":115,"transcript":"next","textOnly":true},{"title":"Editing code","body":"<p>Your editor should now have a simple class as a starting point—we're going to make some edits to this code.</p><p>When you're ready to start, say:</p>","source":"import (\n  \"fmt\"\n  \"math\"\n)\n\nbalance := 0\n\nfunc Display() {\n  fmt.Println(balance)\n}\n\nfunc Deposit(amount int, date int) {\n  balance += amount\n}\n","cursor":0,"transcript":"next","resetSource":"import (\n  \"fmt\"\n  \"math\"\n)\n\nbalance := 0\n\nfunc Display() {\n  fmt.Println(balance)\n}\n\nfunc Deposit(amount int, date int) {\n  balance += amount\n}\n","textOnly":true},{"title":"Navigating code","body":"<p>Let's start by moving our cursor to line 3. Just like before, we can use the “go to” action and the “line” selector.</p><p>Say:</p>","transcript":"go to line 3"},{"title":"Deleting code","body":"<p>It looks like this import isn't being used, so let's remove it with the “delete” action.</p><p>Say:</p>","source":"import (\n  \"fmt\"\n  \"math\"\n)\n\nbalance := 0\n\nfunc Display() {\n  fmt.Println(balance)\n}\n\nfunc Deposit(amount int, date int) {\n  balance += amount\n}\n","cursor":17,"transcript":"delete line"},{"title":"Default action","body":"<p>Since the “go to” action is so common, if you just say a selector, then “go to” will be the default action.</p><p>Try it out by saying:</p>","source":"import (\n  \"fmt\"\n)\n\nbalance := 0\n\nfunc Display() {\n  fmt.Println(balance)\n}\n\nfunc Deposit(amount int, date int) {\n  balance += amount\n}\n","cursor":17,"transcript":"second function"},{"title":"Deleting","body":"<p>It looks like the second parameter of this function isn't being used either.</p><p>Delete it by saying:</p>","source":"import (\n  \"fmt\"\n)\n\nbalance := 0\n\nfunc Display() {\n  fmt.Println(balance)\n}\n\nfunc Deposit(amount int, date int) {\n  balance += amount\n}\n","cursor":77,"transcript":"delete second parameter"},{"title":"Copying","body":"<p>Now, let's try the “copy” action.</p><p>Say:</p>","source":"import (\n  \"fmt\"\n)\n\nbalance := 0\n\nfunc Display() {\n  fmt.Println(balance)\n}\n\nfunc Deposit(amount int) {\n  balance += amount\n}\n","cursor":100,"transcript":"copy function"},{"title":"Chaining","body":"<p>You can chain commands together to go even faster. To paste the method you copied to the end of the class, you can chain a “go to” command and a “paste” command.</p><p>Say:</p>","source":"import (\n  \"fmt\"\n)\n\nbalance := 0\n\nfunc Display() {\n  fmt.Println(balance)\n}\n\nfunc Deposit(amount int) {\n  balance += amount\n}\n","cursor":100,"transcript":"end of file paste","matches":["paste"]},{"title":"Go to text","body":"<p>You can also use “go to” to jump to specific text.</p><p>To jump to the nearest instance of <code>deposit</code>, say:</p>","source":"import (\n  \"fmt\"\n)\n\nbalance := 0\n\nfunc Display() {\n  fmt.Println(balance)\n}\n\nfunc Deposit(amount int) {\n  balance += amount\n}\n\nfunc Deposit(amount int) {\n  balance += amount\n}","cursor":175,"transcript":"go to deposit","matches":["go to <code>deposit</code>"]},{"title":"Changing text","body":"<p>To change existing text, you can use the “change” action with a selector. Since your cursor is on the word <code>deposit</code>, you can change the name of this method by saying:</p>","source":"import (\n  \"fmt\"\n)\n\nbalance := 0\n\nfunc Display() {\n  fmt.Println(balance)\n}\n\nfunc Deposit(amount int) {\n  balance += amount\n}\n\nfunc Deposit(amount int) {\n  balance += amount\n}","cursor":132,"transcript":"change word to withdraw","matches":["change word to <code>Withdraw</code>"]},{"title":"Changing text","body":"<p>You can also directly specify the text you want to change, including symbols.</p><p>For instance, try saying:</p>","source":"import (\n  \"fmt\"\n)\n\nbalance := 0\n\nfunc Display() {\n  fmt.Println(balance)\n}\n\nfunc Deposit(amount int) {\n  balance += amount\n}\n\nfunc Withdraw(amount int) {\n  balance += amount\n}","cursor":140,"transcript":"change next plus to minus","matches":["change next <code>+</code> to <code>-</code>"]},{"title":"Text formatting","body":"<p>When adding or changing text, you can also specify how to format the text with “underscores”, “camel case”, “pascal case”, and so on.</p><p>First, let's go to the start of the file.</p><p>Say:</p>","source":"import (\n  \"fmt\"\n)\n\nbalance := 0\n\nfunc Display() {\n  fmt.Println(balance)\n}\n\nfunc Deposit(amount int) {\n  balance += amount\n}\n\nfunc Withdraw(amount int) {\n  balance -= amount\n}","cursor":166,"transcript":"line 5"},{"title":"Text formatting","body":"<p>Now, add some formatted text by saying:</p>","source":"import (\n  \"fmt\"\n)\n\nbalance := 0\n\nfunc Display() {\n  fmt.Println(balance)\n}\n\nfunc Deposit(amount int) {\n  balance += amount\n}\n\nfunc Withdraw(amount int) {\n  balance -= amount\n}","cursor":20,"transcript":"add all caps min balance colon equals negative 100","matches":["add <code>MIN_BALANCE := -100</code>"]},{"title":"Try it out","body":"<p>Nice job! Now you know some commands for adding, navigating, and editing code.</p><p>For this last example, you'll be writing some code on your own. Don't fret—if you get stuck, just click “show hint”.</p><p>When you're ready to start, say:</p>","source":"import (\n  \"fmt\"\n)\n\nbalance := 0\nMIN_BALANCE := -100\n\nfunc Display() {\n  fmt.Println(balance)\n}\n\nfunc Deposit(amount int) {\n  balance += amount\n}\n\nfunc Withdraw(amount int) {\n  balance -= amount\n}","cursor":52,"transcript":"next","textOnly":true},{"title":"Adding a function","body":"<p>We're going to write a function that takes a name as a parameter, then prints out a greeting.</p><p>First, create a function called <code>SayHello</code>.</p>","source":"","cursor":0,"transcript":"add function say hello","resetSource":"","resetCursor":0,"matches":["add function <code>func SayHello() {\n}</code>"],"hideAnswer":true},{"title":"Adding a parameter","body":"<p>Now, add a <code>string</code> parameter to our function called <code>name</code></p>","source":"func SayHello() {\n}\n","cursor":13,"transcript":"add parameter string name","matches":["add parameter <code>name string</code>"],"hideAnswer":true},{"title":"Adding a statement","body":"<p>Let's start writing the body of our function. First, add the line:</p><p><code>message := 'hello'</code></p>","source":"func SayHello(name string) {\n}\n","cursor":18,"transcript":"add message colon equals string hello","matches":["add <code>message := \"hello\"</code>"],"hideAnswer":true},{"title":"Inserting text","body":"<p>Next, insert the following on the current line:</p><p><code>+ name</code></p>","source":"func SayHello(name string) {\n  message := \"hello\"\n}\n","cursor":49,"transcript":"insert plus name","matches":["insert <code> + name</code>"],"hideAnswer":true},{"title":"Adding a call","body":"<p>Great! Now we can print out the <code>message</code> variable. Add the line:</p><p><code>fmt.Println(message)</code></p>","source":"func SayHello(name string) {\n  message := \"hello\" + name\n}\n","cursor":56,"transcript":"add fmt dot println of message","matches":["add <code>fmt.Println(message)</code>"],"hideAnswer":true},{"title":"Navigating code","body":"<p>Let's make one last edit to our function. First, move your cursor to line 1.</p>","source":"func SayHello(name string) {\n  message := \"hello\" + name\n  fmt.Println(message)\n}\n","cursor":79,"transcript":"line 1","hideAnswer":true},{"title":"Changing text","body":"<p>Finally, let's change the name of our function from <code>SayHello</code> to <code>PrintGreeting</code>","source":"func SayHello(name string) {\n  message := \"hello\" + name\n  fmt.Println(message)\n}\n","cursor":0,"transcript":"change say hello to print greeting","matches":["change <code>SayHello</code> to <code>PrintGreeting</code>"],"hideAnswer":true},{"title":"Congrats!","body":"<p>Awesome! We've covered the basics of adding, navigating, and editing code. Here are a few more tips for getting started with Serenade.</p>","source":"func PrintGreeting(name string) {\n  message := \"hello\" + name\n  fmt.Println(message)\n}\n","cursor":18,"skipEditorFocus":true},{"title":"Community","body":"<p>The Serenade Community is a Discord server where you can get help directly from the Serenade team and meet other people using Serenade.</p><a href=\"https://serenade.ai/community\" target=\"_blank\" class=\"btn btn-download\">Join the community</a>","skipEditorFocus":true},{"title":"Documentation","body":"<p>To learn more about all the voice commands supported by Serenade, check out the Serenade documentation.</p><a href=\"https://serenade.ai/docs\" target=\"_blank\" class=\"primary-button block text-center\">Open documentation</a>","skipEditorFocus":true},{"title":"Try it out!","body":"<p>That's it for our tutorial!</p><p>Don't hesitate to reach out in the community if you run into any issues.</p>","skipEditorFocus":true,"last":true}],"filename":"go-basics.go"}