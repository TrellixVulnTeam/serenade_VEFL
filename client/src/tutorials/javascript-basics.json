{"steps":[{"title":"Getting Started","body":"<p>This guide will walk you through writing your first few lines of code with voice. We’ll go through a few different examples that cover adding, navigating, and editing code.</p><p>To start, click Next below.</p>","skipEditorFocus":true},{"title":"Setup","body":"<p>Serenade will send voice commands to whichever application you have in the foreground. You can see which application Serenade is controlling via the icon at the bottom-right.</p><p>To get started, open VS Code, Atom, or JetBrains, then click next.</p>","nextWhenEditorFocused":true},{"title":"Setup","body":"<p>Before we start the tutorial, let's make sure we're using an empty file. In your editor (without using voice), create a new file and save it as <code>serenade.js</code>.</p>","nextWhenEditorFilename":true},{"title":"Alternatives","body":"<p>As you speak, you’ll see a numbered list of possible commands appear below. The first command runs automatically when you’ve finished speaking. To select a different command, just say its number, like “two” or “three”, and Serenade will run that command instead.</p><p>Let's get started! First, toggle the listening switch above to enable Serenade. Then, say:</p>","transcript":"next","textOnly":true},{"title":"Understanding commands","body":"<p>Most Serenade commands consist of an <i>action</i> followed by a <i>selector</i>.</p><p>An action describes what you're trying to do, like “go to”, “add”, or “insert”. A selector describes the object you're trying to change, like a “line”, “word”, “function”, or “class”.</p><p>We'll see examples throughout this tutorial! To continue, say:</p>","transcript":"next","textOnly":true},{"title":"Inserting code","body":"<p>We'll start with one of the most common actions, “insert”. The “insert” action will insert text directly at your cursor. Try it out by saying:","source":"","cursor":0,"transcript":"insert let message equals string hello world","resetSource":"","matches":["insert <code>let message = 'Hello world'</code>"]},{"title":"Undo","body":"<p>You should now see some code in your editor! To undo any command, you can simply say “undo”. Try it out:</p>","source":"let message = 'Hello world'","cursor":27,"transcript":"undo"},{"title":"Writing code","body":"<p>In this first example, we’re going to write a factorial function from scratch.</p><p>To continue, say:</p>","source":"","cursor":0,"transcript":"next","resetSource":"","textOnly":true},{"title":"Writing a factorial function","body":"<p>Take a look at your editor—that's the code we'll be writing with voice in this tutorial.</p><p>When you're ready to start, say:</p>","source":"function factorial(number) {\n  if (number == 0) {\n    return 1;\n  }\n  else {\n    return number * factorial(number - 1);\n  }\n}\n\nlet value = factorial(5);\n","cursor":0,"transcript":"next","resetSource":"function factorial(number) {\n  if (number == 0) {\n    return 1;\n  }\n  else {\n    return number * factorial(number - 1);\n  }\n}\n\nlet value = factorial(5);\n","textOnly":true},{"title":"Adding a function","body":"<p>While “insert” inserts text at your cursor, the “add” action is used to create new statements and constructs like functions or classes, without needing to dictate any boilerplate.</p><p>Let's give it a try! Create a new function called <code>factorial</code> by saying:</p>","source":"","cursor":0,"transcript":"add function factorial","resetSource":"","matches":["add function <code>function factorial() {\n}</code>"]},{"title":"Adding a parameter","body":"<p>That function will need a parameter, so add one with:</p>","source":"function factorial() {\n}\n","cursor":18,"transcript":"add parameter number","matches":["add parameter <code>number</code>"]},{"title":"Adding a condition","body":"<p>Next, let's add a condition to check if the <code>number</code> parameter we just added equals zero. Say:</p>","source":"function factorial(number) {\n}\n","cursor":25,"transcript":"add if number equals zero","matches":["add <code>if (number == 0) {\n}</code>"]},{"title":"Adding a statement","body":"<p>Now, add a return statement by saying:</p>","source":"function factorial(number) {\n  if (number == 0) {\n  }\n}\n","cursor":46,"transcript":"add return 1","matches":["add <code>return 1;</code>"]},{"title":"Adding a branch","body":"<p>Great! Now our if branch is done. Let's create an else branch by saying:</p>","source":"function factorial(number) {\n  if (number == 0) {\n    return 1;\n  }\n}\n","cursor":62,"transcript":"add else","matches":["add <code>else {\n}</code>"]},{"title":"Finishing the function","body":"<p>So far, we've been using short commands, but you can also dictate longer commands with Serenade.</p><p>Let's try finishing up the factorial function with a single voice command. Say:</p>","source":"function factorial(number) {\n  if (number == 0) {\n    return 1;\n  } else {\n  }\n}\n","cursor":74,"transcript":"add return number times factorial of number minus one","matches":["add <code>return number * factorial(number - 1);</code>"]},{"title":"Navigating code","body":"<p>Now that we have a working factorial function, let's call it! First, we need to move the cursor to the next line.</p><p>You can move your cursor with the “go to” action. Try it out by saying:</p>","source":"function factorial(number) {\n  if (number == 0) {\n    return 1;\n  } else {\n    return number * factorial(number - 1);\n  }\n}\n","cursor":116,"transcript":"go to line 8"},{"title":"Adding a call","body":"<p>Now, we can add a line of code that calls our <code>factorial</code> function.</p><p>Say:</p>","source":"function factorial(number) {\n  if (number == 0) {\n    return 1;\n  } else {\n    return number * factorial(number - 1);\n  }\n}\n","cursor":124,"transcript":"add let value equals factorial of five","matches":["add <code>let value = factorial(5);</code>"]},{"title":"Editing code","body":"<p>Congrats, you just wrote your first code with voice!</p><p>Now that we've covered some commands for adding new code, let's try editing some existing code.</p><p>To continue, say:</p>","source":"function factorial(number) {\n  if (number == 0) {\n    return 1;\n  } else {\n    return number * factorial(number - 1);\n  }\n}\n\nlet value = factorial(5);\n","cursor":149,"transcript":"next","textOnly":true},{"title":"Editing code","body":"<p>Your editor should now have a simple class as a starting point—we're going to make some edits to this code.</p><p>When you're ready to start, say:</p>","source":"import { Account } from \"./account\";\nimport * as _ from \"lodash\";\n\nclass CheckingAccount {\n  constructor(name, balance) {\n    this.name = name;\n    this.balance = balance;\n  }\n\n  deposit(amount, date) {\n    this.balance += amount;\n  }\n}\n","cursor":0,"transcript":"next","resetSource":"import { Account } from \"./account\";\nimport * as _ from \"lodash\";\n\nclass CheckingAccount {\n  constructor(name, balance) {\n    this.name = name;\n    this.balance = balance;\n  }\n\n  deposit(amount, date) {\n    this.balance += amount;\n  }\n}\n","textOnly":true},{"title":"Navigating code","body":"<p>Let's start by moving our cursor to line 2. Just like before, we can use the “go to” action and the “line” selector.</p><p>Say:</p>","transcript":"go to line 2"},{"title":"Deleting","body":"<p>It looks like this import isn't being used, so let's remove it with the “delete” action.</p><p>Say:</p>","source":"import { Account } from \"./account\";\nimport * as _ from \"lodash\";\n\nclass CheckingAccount {\n  constructor(name, balance) {\n    this.name = name;\n    this.balance = balance;\n  }\n\n  deposit(amount, date) {\n    this.balance += amount;\n  }\n}\n","cursor":37,"transcript":"delete line"},{"title":"Default action","body":"<p>Since the “go to” action is so common, if you just say a selector, then “go to” will be the default action.</p><p>Try it out by saying:</p>","source":"import { Account } from \"./account\";\n\nclass CheckingAccount {\n  constructor(name, balance) {\n    this.name = name;\n    this.balance = balance;\n  }\n\n  deposit(amount, date) {\n    this.balance += amount;\n  }\n}\n","cursor":37,"transcript":"second method"},{"title":"Deleting","body":"<p>It looks like the second parameter of this method isn't being used either.</p><p>Delete it by saying:</p>","source":"import { Account } from \"./account\";\n\nclass CheckingAccount {\n  constructor(name, balance) {\n    this.name = name;\n    this.balance = balance;\n  }\n\n  deposit(amount, date) {\n    this.balance += amount;\n  }\n}\n","cursor":150,"transcript":"delete second parameter"},{"title":"Copying","body":"<p>Now, let's try the “copy” action.</p><p>Say:</p>","source":"import { Account } from \"./account\";\n\nclass CheckingAccount {\n  constructor(name, balance) {\n    this.name = name;\n    this.balance = balance;\n  }\n\n  deposit(amount) {\n    this.balance += amount;\n  }\n}\n","cursor":164,"transcript":"copy method"},{"title":"Chaining","body":"<p>You can chain commands together to go even faster. To paste the method you copied to the end of the class, you can chain a “go to” command and a “paste” command.</p><p>Say:</p>","source":"import { Account } from \"./account\";\n\nclass CheckingAccount {\n  constructor(name, balance) {\n    this.name = name;\n    this.balance = balance;\n  }\n\n  deposit(amount) {\n    this.balance += amount;\n  }\n}\n","cursor":164,"transcript":"end of method paste","matches":["paste"]},{"title":"Go to text","body":"<p>You can also use “go to” to jump to specific text.</p><p>To jump to the nearest instance of <code>deposit</code>, say:</p>","source":"import { Account } from \"./account\";\n\nclass CheckingAccount {\n  constructor(name, balance) {\n    this.name = name;\n    this.balance = balance;\n  }\n\n  deposit(amount) {\n    this.balance += amount;\n  }\n  deposit(amount) {\n    this.balance += amount;\n  }\n}\n","cursor":251,"transcript":"go to deposit","matches":["go to <code>deposit</code>"]},{"title":"Changing text","body":"<p>To change existing text, you can use the “change” action with a selector. Since your cursor is on the word <code>deposit</code>, you can change the name of this method by saying:</p>","source":"import { Account } from \"./account\";\n\nclass CheckingAccount {\n  constructor(name, balance) {\n    this.name = name;\n    this.balance = balance;\n  }\n\n  deposit(amount) {\n    this.balance += amount;\n  }\n  deposit(amount) {\n    this.balance += amount;\n  }\n}\n","cursor":202,"transcript":"change word to withdraw","matches":["change word to <code>withdraw</code>"]},{"title":"Changing text","body":"<p>You can also directly specify the text you want to change, including symbols.</p><p>For instance, try saying:</p>","source":"import { Account } from \"./account\";\n\nclass CheckingAccount {\n  constructor(name, balance) {\n    this.name = name;\n    this.balance = balance;\n  }\n\n  deposit(amount) {\n    this.balance += amount;\n  }\n  withdraw(amount) {\n    this.balance += amount;\n  }\n}\n","cursor":210,"transcript":"change next plus to minus","matches":["change next <code>+</code> to <code>-</code>"]},{"title":"Text formatting","body":"<p>When adding or changing text, you can also specify how to format the text with “underscores”, “camel case”, “pascal case”, and so on.</p><p>First, let's go to the start of the file.</p><p>Say:</p>","source":"import { Account } from \"./account\";\n\nclass CheckingAccount {\n  constructor(name, balance) {\n    this.name = name;\n    this.balance = balance;\n  }\n\n  deposit(amount) {\n    this.balance += amount;\n  }\n  withdraw(amount) {\n    this.balance -= amount;\n  }\n}\n","cursor":239,"transcript":"start of file"},{"title":"Text formatting","body":"<p>Now, add some formatted text by saying:</p>","source":"import { Account } from \"./account\";\n\nclass CheckingAccount {\n  constructor(name, balance) {\n    this.name = name;\n    this.balance = balance;\n  }\n\n  deposit(amount) {\n    this.balance += amount;\n  }\n  withdraw(amount) {\n    this.balance -= amount;\n  }\n}\n","cursor":0,"transcript":"add all caps min balance equals negative 100","matches":["add <code>MIN_BALANCE = -100;</code>"]},{"title":"Adding a parent class","body":"<p>Finally, let's have this class inherit from a parent class called <code>Account</code>. The “add” action will add code to the logical spot closest to the cursor, so from here, you can just say:</p>","source":"import { Account } from \"./account\";\nMIN_BALANCE = -100;\n\nclass CheckingAccount {\n  constructor(name, balance) {\n    this.name = name;\n    this.balance = balance;\n  }\n\n  deposit(amount) {\n    this.balance += amount;\n  }\n  withdraw(amount) {\n    this.balance -= amount;\n  }\n}\n","cursor":55,"transcript":"add extends account","matches":["add extends <code>Account</code>"]},{"title":"Style","body":"<p>To style your source code, say:</p>","source":"import { Account } from \"./account\";\nMIN_BALANCE = -100;\n\nclass CheckingAccount extends Account {\n  constructor(name, balance) {\n    this.name = name;\n    this.balance = balance;\n  }\n\n  deposit(amount) {\n    this.balance += amount;\n  }\n  withdraw(amount) {\n    this.balance -= amount;\n  }\n}\n","cursor":95,"transcript":"style file"},{"title":"Try it out","body":"<p>Nice job! Now you know some commands for adding, navigating, and editing code.</p><p>For this last example, you'll be writing some code on your own. Don't fret—if you get stuck, just click “show hint”.</p><p>When you're ready to start, say:</p>","source":"import { Account } from \"./account\";\nMIN_BALANCE = -100;\n\nclass CheckingAccount extends Account {\n  constructor(name, balance) {\n    this.name = name;\n    this.balance = balance;\n  }\n\n  deposit(amount) {\n    this.balance += amount;\n  }\n  withdraw(amount) {\n    this.balance -= amount;\n  }\n}\n","cursor":95,"transcript":"next","textOnly":true},{"title":"Adding a function","body":"<p>We're going to write a function that takes a name as a parameter, then prints out a greeting.</p><p>First, create a function called <code>sayHello</code>.</p>","source":"","cursor":0,"transcript":"add function say hello","resetSource":"","resetCursor":0,"matches":["add function <code>function sayHello() {\n}</code>"],"hideAnswer":true},{"title":"Adding a parameter","body":"<p>Nice job! Next, add a parameter to your function called <code>name</code>.</p>","source":"function sayHello() {\n}\n","cursor":17,"transcript":"add parameter name","matches":["add parameter <code>name</code>"],"hideAnswer":true},{"title":"Adding a statement","body":"<p>Let's start writing the body of our function. First, add the line:</p><p><code>let message = \"Hello\"</code></p>","source":"function sayHello(name) {\n}\n","cursor":22,"transcript":"add let message equals string hello","matches":["add <code>let message = 'Hello';</code>"],"hideAnswer":true},{"title":"Inserting text","body":"<p>Next, insert the following on the current line:</p><p><code>+ name</code></p>","source":"function sayHello(name) {\n  let message = 'Hello';\n}\n","cursor":49,"transcript":"insert plus name","matches":["insert <code> + name</code>"],"hideAnswer":true},{"title":"Adding a call","body":"<p>Great! Now we can print out the <code>message</code> variable. Add a line that looks like:</p><p><code>console.log(message);</code></p>","source":"function sayHello(name) {\n  let message = 'Hello' + name;\n}\n","cursor":56,"transcript":"add print message","matches":["add <code>console.log(message);</code>"],"hideAnswer":true},{"title":"Navigating code","body":"<p>Let's make one last edit to our function. First, move your cursor to line 1.</p>","source":"function sayHello(name) {\n  let message = 'Hello' + name;\n  console.log(message);\n}\n","cursor":79,"transcript":"line 1","hideAnswer":true},{"title":"Changing text","body":"<p>Finally, let's change the name of the function from <code>sayHello</code> to <code>printGreeting</code>","source":"function sayHello(name) {\n  let message = 'Hello' + name;\n  console.log(message);\n}\n","cursor":0,"transcript":"change say hello to print greeting","matches":["change <code>sayHello</code> to <code>printGreeting</code>"],"hideAnswer":true},{"title":"Congrats!","body":"<p>Awesome! We've covered the basics of adding, navigating, and editing code. Here are a few more tips for getting started with Serenade.</p>","source":"function printGreeting(name) {\n  let message = 'Hello' + name;\n  console.log(message);\n}\n","cursor":22,"skipEditorFocus":true},{"title":"Community","body":"<p>The Serenade Community is a Discord server where you can get help directly from the Serenade team and meet other people using Serenade.</p><a href=\"https://serenade.ai/community\" target=\"_blank\" class=\"primary-button block text-center\">Join the community</a>","skipEditorFocus":true},{"title":"Documentation","body":"<p>To learn more about all the voice commands supported by Serenade, check out the Serenade documentation.</p><a href=\"https://serenade.ai/docs\" target=\"_blank\" class=\"primary-button block text-center\">Open documentation</a>","skipEditorFocus":true},{"title":"Try it out!","body":"<p>That's it for our tutorial!</p><p>Don't hesitate to reach out in the community if you run into any issues.</p>","skipEditorFocus":true,"last":true}],"filename":"javascript-basics.js"}