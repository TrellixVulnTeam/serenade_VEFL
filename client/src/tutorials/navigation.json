{"steps":[{"title":"Code Navigation","body":"<p>This tutorial will cover how to efficiently navigate your code using Serenade. Let's get started!</p>","transcript":"next","skipEditorFocus":true,"textOnly":true},{"title":"Setup","body":"<p>Serenade will send voice commands to whichever application you have in the foreground. You can see which application Serenade is controlling via the icon at the bottom-right.</p><p>To get started, open VS Code, Atom, or JetBrains, then click next.</p>","nextWhenEditorFocused":true},{"title":"Setup","body":"<p>Before we start the tutorial, let's make sure we're using an empty file. In your editor (without using voice), create a new file and save it as <code>serenade.py</code>.</p>","nextWhenEditorFilename":true},{"title":"Starter code","body":"<p>Your editor should now have a some Python code as a starting point. We'll go through a variety of Serenade commands for navigating around this file.</p>","source":"import random\n\nclass Cache:\n    def __init__(self):\n        self.map = {}\n\n    def get(self, key):\n        return self.map[key]\n\n    def set(self, key, value):\n        self.map[key] = value\n\n    def random(self):\n        return random.choice(list(self.map.values()))\n\n    def remove(self, key):\n        del self.map[key]\n","cursor":0,"transcript":"next","resetSource":"import random\n\nclass Cache:\n    def __init__(self):\n        self.map = {}\n\n    def get(self, key):\n        return self.map[key]\n\n    def set(self, key, value):\n        self.map[key] = value\n\n    def random(self):\n        return random.choice(list(self.map.values()))\n\n    def remove(self, key):\n        del self.map[key]\n","textOnly":true},{"title":"Text selectors","body":"<p>The simplest way of navigating around a file is to use the “go to” command with the text you'd like to move your cursor to. Move your cursor to the string “map” by saying:</p>","transcript":"go to map","matches":["go to <code>map</code>"]},{"title":"Modifiers","body":"<p>You can use the “next” and “previous” modifiers to navigate to a specific instance of a string. Since your cursor is already at an instance of “map”, to go to the next instance, say:</p>","source":"import random\n\nclass Cache:\n    def __init__(self):\n        self.map = {}\n\n    def get(self, key):\n        return self.map[key]\n\n    def set(self, key, value):\n        self.map[key] = value\n\n    def random(self):\n        return random.choice(list(self.map.values()))\n\n    def remove(self, key):\n        del self.map[key]\n","cursor":65,"transcript":"go to next map","matches":["go to next <code>map</code>"]},{"title":"Line selectors","body":"<p>You can also move your cursor by referring to <i>selector</i>, which include lines, words, and programming constructs like functions and classes. The “line” selector is a common one. Try it out by saying:</p>","source":"import random\n\nclass Cache:\n    def __init__(self):\n        self.map = {}\n\n    def get(self, key):\n        return self.map[key]\n\n    def set(self, key, value):\n        self.map[key] = value\n\n    def random(self):\n        return random.choice(list(self.map.values()))\n\n    def remove(self, key):\n        del self.map[key]\n","cursor":119,"transcript":"go to line 3"},{"title":"Modifiers","body":"<p>You can use those same “next” and “previous” modifiers with any selector, including “line”. To move your cursor to the next line, just say:</p>","source":"import random\n\nclass Cache:\n    def __init__(self):\n        self.map = {}\n\n    def get(self, key):\n        return self.map[key]\n\n    def set(self, key, value):\n        self.map[key] = value\n\n    def random(self):\n        return random.choice(list(self.map.values()))\n\n    def remove(self, key):\n        del self.map[key]\n","cursor":15,"transcript":"go to next line"},{"title":"Shorthand","body":"<p>Because navigation commands are so common, Serenade includes a helpful shorthand: to navigate to a selector, you can just say the selector's name. In other words, the “go to” prefix is optional. Try it out by saying:</p>","source":"import random\n\nclass Cache:\n    def __init__(self):\n        self.map = {}\n\n    def get(self, key):\n        return self.map[key]\n\n    def set(self, key, value):\n        self.map[key] = value\n\n    def random(self):\n        return random.choice(list(self.map.values()))\n\n    def remove(self, key):\n        del self.map[key]\n","cursor":28,"transcript":"previous line"},{"title":"Word selector","body":"<p>Another common selector is the “word” selector, which you can use to move your cursor among the words in a file. Try it with:</p>","source":"import random\n\nclass Cache:\n    def __init__(self):\n        self.map = {}\n\n    def get(self, key):\n        return self.map[key]\n\n    def set(self, key, value):\n        self.map[key] = value\n\n    def random(self):\n        return random.choice(list(self.map.values()))\n\n    def remove(self, key):\n        del self.map[key]\n","cursor":15,"transcript":"next word"},{"title":"Ordinals","body":"<p>As you saw with the “line” selector earlier, you can also refer to the index of a selector in a list. Let's try a few! Say:</p>","source":"import random\n\nclass Cache:\n    def __init__(self):\n        self.map = {}\n\n    def get(self, key):\n        return self.map[key]\n\n    def set(self, key, value):\n        self.map[key] = value\n\n    def random(self):\n        return random.choice(list(self.map.values()))\n\n    def remove(self, key):\n        del self.map[key]\n","cursor":21,"transcript":"first word"},{"title":"Ordinals","body":"<p>You can also say a selector followed by a number to refer to its position. For instance, say:</p>","source":"import random\n\nclass Cache:\n    def __init__(self):\n        self.map = {}\n\n    def get(self, key):\n        return self.map[key]\n\n    def set(self, key, value):\n        self.map[key] = value\n\n    def random(self):\n        return random.choice(list(self.map.values()))\n\n    def remove(self, key):\n        del self.map[key]\n","cursor":15,"transcript":"word 2"},{"title":"Repetition","body":"<p>Saying “next word” over and over again would be pretty slow, so Serenade also lets you repeat cursor movements by combining a number with “next” or “previous”. Try saying:</p>","source":"import random\n\nclass Cache:\n    def __init__(self):\n        self.map = {}\n\n    def get(self, key):\n        return self.map[key]\n\n    def set(self, key, value):\n        self.map[key] = value\n\n    def random(self):\n        return random.choice(list(self.map.values()))\n\n    def remove(self, key):\n        del self.map[key]\n","cursor":21,"transcript":"next 3 words"},{"title":"Endpoints","body":"<p>You can also jump to the “start” or “end” of any selector. Try it by saying:</p>","source":"import random\n\nclass Cache:\n    def __init__(self):\n        self.map = {}\n\n    def get(self, key):\n        return self.map[key]\n\n    def set(self, key, value):\n        self.map[key] = value\n\n    def random(self):\n        return random.choice(list(self.map.values()))\n\n    def remove(self, key):\n        del self.map[key]\n","cursor":36,"transcript":"end of line"},{"title":"Code selectors","body":"<p>So far, we've just been using selectors that refer to text objects, like lines and words. But, where Serenade really shines is in its ability to refer to code objects. Let's try a few! Say:</p>","source":"import random\n\nclass Cache:\n    def __init__(self):\n        self.map = {}\n\n    def get(self, key):\n        return self.map[key]\n\n    def set(self, key, value):\n        self.map[key] = value\n\n    def random(self):\n        return random.choice(list(self.map.values()))\n\n    def remove(self, key):\n        del self.map[key]\n","cursor":51,"transcript":"start of class"},{"title":"Code selectors","body":"<p>As you can see, you can use all the modifiers you've already seen (like “next”, “previous”, “start”, and “end”) with code selectors as well. You can use ordinals in the same way:</p>","source":"import random\n\nclass Cache:\n    def __init__(self):\n        self.map = {}\n\n    def get(self, key):\n        return self.map[key]\n\n    def set(self, key, value):\n        self.map[key] = value\n\n    def random(self):\n        return random.choice(list(self.map.values()))\n\n    def remove(self, key):\n        del self.map[key]\n","cursor":15,"transcript":"third method"},{"title":"Code selectors","body":"<p>Let's try another one, this time combining a few modifiers:</p>","source":"import random\n\nclass Cache:\n    def __init__(self):\n        self.map = {}\n\n    def get(self, key):\n        return self.map[key]\n\n    def set(self, key, value):\n        self.map[key] = value\n\n    def random(self):\n        return random.choice(list(self.map.values()))\n\n    def remove(self, key):\n        del self.map[key]\n","cursor":133,"transcript":"end of second parameter"},{"title":"Code selectors","body":"<p>For any “go to” command, your cursor will always jump to the nearest occurrence of the selector you specify. So, in order to jump to the return value a few lines above, you can say:</p>","source":"import random\n\nclass Cache:\n    def __init__(self):\n        self.map = {}\n\n    def get(self, key):\n        return self.map[key]\n\n    def set(self, key, value):\n        self.map[key] = value\n\n    def random(self):\n        return random.choice(list(self.map.values()))\n\n    def remove(self, key):\n        del self.map[key]\n","cursor":150,"transcript":"return value"},{"title":"Try it out!","body":"<p>That's it for our tutorial!</p><p>Don't hesitate to reach out in the community if you run into any issues.</p>","source":"import random\n\nclass Cache:\n    def __init__(self):\n        self.map = {}\n\n    def get(self, key):\n        return self.map[key]\n\n    def set(self, key, value):\n        self.map[key] = value\n\n    def random(self):\n        return random.choice(list(self.map.values()))\n\n    def remove(self, key):\n        del self.map[key]\n","cursor":114,"skipEditorFocus":true,"last":true}],"filename":"navigation.py"}